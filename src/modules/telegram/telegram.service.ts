import {
  Injectable,
  OnModuleInit,
  OnModuleDestroy,
  Logger,
} from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { Bot } from 'grammy';
@Injectable()
export class TelegramService implements OnModuleInit, OnModuleDestroy {
  private bot: Bot;
  private readonly logger = new Logger(TelegramService.name, {
    timestamp: true,
  });

  constructor(private readonly configService: ConfigService) {
    const tgToken = this.configService.get<string>('TELEGRAM_BOT_TOKEN');
    if (!tgToken) {
      throw new Error(
        'TELEGRAM_BOT_TOKEN is not defined in environment variables!',
      );
    }
    this.bot = new Bot(tgToken);
  }

  async onModuleInit() {
    this.logger.log('Starting Telegram bot...');
    this.registerHandlers();
    // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling.
    // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–µ–±—Ö—É–∫–∏.
    this.bot.start();
    this.logger.log('Telegram bot started successfully!');
  }

  async onModuleDestroy() {
    this.logger.log('Stopping Telegram bot...');
    this.bot.stop();
    this.logger.log('Telegram bot stopped successfully!');
  }

  private registerHandlers() {
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    this.bot.command('start', async (ctx) => {
      this.logger.debug(`User ${ctx.from?.id} started the bot`);
      ctx.react('ü§©');
      return ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å. –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
    });

    this.bot.on('message:text', async (ctx) => {
      this.logger.debug(`User ${ctx.from?.id} sent a message`);
      if (ctx.message.text) {
        ctx.react('üëç');
        return ctx.reply(`–¢—ã –Ω–∞–ø–∏—Å–∞–ª: ${ctx.message.text}`);
      }
    });
  }
}
