import { Injectable, Logger } from '@nestjs/common';
import { Cron, CronExpression } from '@nestjs/schedule';
import { RedisService } from '../../redis';
import { Bot, InlineKeyboard } from 'grammy';
import { MyContext } from '../../../types';
import { BotConfigService } from '../bot-config/bot-config.service';
import { StartSceneService } from './start/start.service';
import { MainMenuSceneService } from './main-menu/main-menu.service';
import { CheckProductSceneService } from './check-product/check-product.service';
import { SupportSceneService } from './support/support.service';
import {
  CALLBACK_DATA,
  PAYMENT_OPTIONS,
  SCENES,
  TIMEOUTS,
  WAITING_FOR_INPUT,
} from './scenes.constants';
import { OpenAiService } from '../../../modules/openai';
import { TariffsSceneService } from './tariffs/tariffs.service';
import { PaymentSceneService } from './payment/payment.service';
import { PaymentProvider } from './payment/payment';
import { ProfileSceneService } from './profile/profile.service';
import { PaymentsService } from '../../payments';

@Injectable()
export class ScenesOrchestratorService {
  private readonly bot: Bot<MyContext>;
  private readonly logger = new Logger(ScenesOrchestratorService.name);
  private redisClient;

  private readonly backKeyboard = new InlineKeyboard().text(
    'üîô –ù–∞–∑–∞–¥',
    CALLBACK_DATA.GO_TO_MAIN_MENU,
  );

  constructor(
    private readonly botConfigService: BotConfigService,
    private readonly redisService: RedisService,
    private readonly startScene: StartSceneService,
    private readonly mainMenuScene: MainMenuSceneService,
    private readonly checkProductScene: CheckProductSceneService,
    private readonly tariffsScene: TariffsSceneService,
    private readonly paymentScene: PaymentSceneService,
    private readonly paymentProvider: PaymentProvider,
    private readonly profileScene: ProfileSceneService,
    private readonly supportScene: SupportSceneService,
    private readonly openAiService: OpenAiService,
    private readonly paymentsService: PaymentsService,
  ) {
    this.redisClient = this.redisService.getRedisClient();

    this.bot = botConfigService.getBot();
    this.registerHandlers();
  }

  private registerHandlers() {
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
     */

    this.bot.command('start', async (ctx) => {
      this.logger.log(`Processing /start command for user ${ctx?.from?.id}`);
      ctx.session.currentScene = SCENES.START;
      await this.startScene.handle(ctx);

      // –°—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (—Å –∑–∞–¥–µ—Ä–∂–∫–æ–π TIMEOUTS.AFTER_START (3 —Å–µ–∫—É–Ω–¥—ã) –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ –∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –≤–Ω–∏–º–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è /start)

      await ctx.replyWithChatAction('typing');

      setTimeout(
        async () => await this.goToScene(ctx, SCENES.MAIN_MENU),
        TIMEOUTS.AFTER_START,
      );
    });

    this.bot.command('check', async (ctx) => {
      this.logger.log(`Processing /check command for user ${ctx?.from?.id}`);
      ctx.session.currentScene = SCENES.CHECK_PRODUCT;
      await this.checkProductScene.handle(ctx);
    });

    this.bot.command('pricing', async (ctx) => {
      this.logger.log(`Processing /pricing command for user ${ctx?.from?.id}`);
      ctx.session.currentScene = SCENES.TARIFFS;
      await this.tariffsScene.handle(ctx);
    });

    this.bot.command('buy', async (ctx) => {
      this.logger.log(`Processing /buy command for user ${ctx?.from?.id}`);
      ctx.session.currentScene = SCENES.PAYMENT;
      await this.paymentScene.handle(ctx);
    });

    this.bot.command('profile', async (ctx) => {
      this.logger.log(`Processing /profile command for user ${ctx?.from?.id}`);
      ctx.session.currentScene = SCENES.SUPPORT;
      await this.profileScene.handle(ctx);
    });

    this.bot.command('help', async (ctx) => {
      this.logger.log(`Processing /help command for user ${ctx?.from?.id}`);
      ctx.session.currentScene = SCENES.SUPPORT;
      await this.supportScene.handle(ctx);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–ª–∞—Ç–µ–∂–∞, –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≤ Telegram Stars

    this.bot.on('pre_checkout_query', async (ctx) => {
      return ctx.answerPreCheckoutQuery(true).catch(() => {
        this.logger.error(
          `answerPreCheckoutQuery failed for clientId: ${ctx.from?.id}`,
        );
      });
    });

    // –ï–î–ò–ù–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
    this.bot.on('callback_query:data', async (ctx) => {
      const callbackData = ctx.callbackQuery.data;
      this.logger.log(`Processing callback: ${callbackData}`);

      switch (callbackData) {
        case CALLBACK_DATA.GO_TO_MAIN_MENU:
          await this.goToScene(ctx, SCENES.MAIN_MENU);
          break;
        case CALLBACK_DATA.GO_TO_CHECK_PRODUCT:
          // TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–ª–∏—á–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ - —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –ø–µ—Ä–µ–≤–æ–¥ –≤ —Å—Ü–µ–Ω—É Tariffs

          await this.goToScene(ctx, SCENES.CHECK_PRODUCT);
          break;
        case CALLBACK_DATA.GO_TO_TARIFFS:
          await this.goToScene(ctx, SCENES.TARIFFS);
          break;
        case CALLBACK_DATA.GO_TO_PAYMENT:
          await this.goToScene(ctx, SCENES.PAYMENT);
          break;
        case CALLBACK_DATA.GO_TO_PAYMENT_OPTION_ONE:
          await this.paymentProvider.generatePaymentInvoce(
            ctx,
            PAYMENT_OPTIONS.ONE_TIME,
          );
          break;
        case CALLBACK_DATA.GO_TO_PAYMENT_OPTION_TWO:
          await this.paymentProvider.generatePaymentInvoce(
            ctx,
            PAYMENT_OPTIONS.TEN_TIMES,
          );
          break;
        case CALLBACK_DATA.GO_TO_PAYMENT_OPTION_THREE:
          await this.paymentProvider.generatePaymentInvoce(
            ctx,
            PAYMENT_OPTIONS.MONTH,
          );
          break;
        case CALLBACK_DATA.GO_TO_PAYMENT_OPTION_FOUR:
          await this.paymentProvider.generatePaymentInvoce(
            ctx,
            PAYMENT_OPTIONS.YEAR,
          );
          break;
        case CALLBACK_DATA.GO_TO_PROFILE:
          await this.goToScene(ctx, SCENES.PROFILE, true, true);
          break;
        case CALLBACK_DATA.GO_TO_SUPPORT:
          await this.goToScene(ctx, SCENES.SUPPORT);
          break;
        default:
          this.logger.warn(
            `Unknown callback data: ${callbackData} for chatId: ${ctx?.from?.id}`,
          );
          await ctx.answerCallbackQuery();
      }
    });

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
     */

    this.bot.on('message:successful_payment', async (ctx) => {
      if (!ctx.message || !ctx.message.successful_payment || !ctx.from) {
        return;
      }

      // TODO: –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É, —É–≤–µ–ª–∏—á–∏—Ç—å –≤ –ë–î –∫–æ–ª-–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –∏–ª–∏ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î –∑–∞–ø–∏—Å—å –æ–± –æ–ø–ª–∞—Ç–µ (–≤–∫–ª—é—á–∞—è –¥–µ—Ç–∞–ª–∏ –ø–ª–∞—Ç–µ–∂–∞) –∏ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

      this.logger.log(
        `Successful payment for clientId ${ctx.from.id}: ${JSON.stringify(
          ctx.message.successful_payment,
        )}`,
      );

      await this.paymentsService.createPaidRecord({
        clientId: ctx.from.id,
        successfulPayment: ctx.message.successful_payment,
      });

      await ctx.reply(
        '‚≠ê –û–ø–ª–∞—Ç–∞ <b>–ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ</b> ‚Äî –±–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø–æ–∫—É–ø–∫—É\\!',
        {
          parse_mode: 'HTML',
        },
      );

      await this.goToScene(ctx, SCENES.MAIN_MENU, false, false);
    });

    this.bot.on('message:photo', async (ctx) => {
      const waitingFor = ctx.session.waitingForInput;
      const photo = ctx.message.photo;

      // –ï—Å–ª–∏ –±–æ—Ç –Ω–∏—á–µ–≥–æ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤—ã—Ö–æ–¥–∏–º
      if (!waitingFor) return;

      switch (waitingFor) {
        case WAITING_FOR_INPUT.PRODUCT_PHOTO: {
          await this.handleProductPhoto(ctx, photo);
          break;
        }

        default: {
          // –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å—Ç—å, –Ω–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω
          this.logger.warn(
            `Unhandled waitingFor state: ${waitingFor} from user ${ctx.from.id}`,
          );
          break;
        }
      }
    });

    this.bot.on('message', async (ctx) => {
      const waitingFor = ctx.session.waitingForInput;
      // –ï—Å–ª–∏ –±–æ—Ç –Ω–∏—á–µ–≥–æ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤—ã—Ö–æ–¥–∏–º
      if (!waitingFor) return;

      switch (waitingFor) {
        case WAITING_FOR_INPUT.PRODUCT_PHOTO: {
          await ctx.reply(
            `‚ùó –ö–∞–∂–µ—Ç—Å—è, —ç—Ç–æ –Ω–µ —Ñ–æ—Ç–æ —É–ø–∞–∫–æ–≤–∫–∏. –ß—Ç–æ–±—ã —è —Å–º–æ–≥ –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑, –º–Ω–µ –Ω—É–∂–µ–Ω —Å–æ—Å—Ç–∞–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ (—Ñ–æ—Ç–æ —Å–ø–∏—Å–∫–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –∏ —Ç.–¥.).
üîÅ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ —Å–æ—Å—Ç–∞–≤–∞ ‚Äî –∏ —è —Å—Ä–∞–∑—É –Ω–∞—á–Ω—É –ø—Ä–æ–≤–µ—Ä–∫—É!
`,
            { reply_markup: this.backKeyboard, parse_mode: 'HTML' },
          );
          break;
        }
        default: {
          // –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å—Ç—å, –Ω–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω
          this.logger.warn(
            `Unhandled waitingFor state: ${waitingFor} from user ${ctx.from.id}`,
          );
          break;
        }
      }
    });
  }

  private async handleProductPhoto(ctx: MyContext, photo: any) {
    this.logger.log(
      `Received photo from ${ctx?.from?.id}, photo[0].file_id: ${photo[0].file_id}\n\nphoto: ${JSON.stringify(
        photo,
      )}`,
    );

    ctx.session.photo = photo;

    // –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏

    await ctx.reply(
      `–û—Ç–ª–∏—á–Ω–æ! –Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ—Å—Ç–∞–≤ –ø—Ä–æ–¥—É–∫—Ç–∞, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è‚Ä¶`,
    );

    await ctx.replyWithChatAction('typing');

    const analysisResult = await this.openAiService.analyzeProductImage(photo);

    if (analysisResult.status === 'Success' && analysisResult.payload) {
      if (Array.isArray(analysisResult.payload.messageChunks)) {
        // TODO: –£–º–µ–Ω—å—à–∏—Ç—å –≤ –ë–î –∫–æ–ª-–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫

        for (const msg of analysisResult.payload.messageChunks) {
          await ctx.reply(msg, { parse_mode: 'HTML' });
        }

        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        ctx.session.waitingForInput = null;
        ctx.session.sceneEntryTime = null;
        await this.mainMenuScene.handle(ctx);
      } else {
        this.logger.error(
          `Error - analysisResult.payload.messageChunks is not an array: ${JSON.stringify(analysisResult.payload.messageChunks)}`,
        );
        await ctx.reply(
          '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        );

        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        ctx.session.waitingForInput = null;
        ctx.session.sceneEntryTime = null;
        await this.mainMenuScene.handle(ctx);
      }
    } else if (analysisResult.status === 'Failed') {
      // –≠—Ç–æ –∫–µ–π—Å, –∫–æ–≥–¥–∞ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è, –Ω–æ –æ–Ω–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∏ –Ω–∞ –Ω–µ–π –Ω–µ—Ç —Å–æ—Å—Ç–∞–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
      if (
        !analysisResult.payload.isContextCorrect &&
        analysisResult.payload.contextExplanation
      ) {
        // TODO: –£–º–µ–Ω—å—à–∏—Ç—å –≤ –ë–î –∫–æ–ª-–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫

        await ctx.reply(
          `–¢—ã –ø—Ä–∏—Å–ª–∞–ª —Ñ–æ—Ç–æ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–æ—Å—Ç–∞–≤ –ø—Ä–æ–¥—É–∫—Ç–∞:\n‚ùóÔ∏è ${analysisResult.payload.contextExplanation}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ —Å–æ—Å—Ç–∞–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–∞, —á—Ç–æ–±—ã —è —Å–º–æ–≥ –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑!`,
          { reply_markup: this.backKeyboard },
        );
      } else {
        this.logger.error(
          `analysisResult.payload.isContextCorrect and/or analysisResult.payload.contextExplanation are not correct: ${JSON.stringify(analysisResult.payload)}`,
        );
        await ctx.reply(
          '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        );

        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        ctx.session.waitingForInput = null;
        ctx.session.sceneEntryTime = null;
        await this.mainMenuScene.handle(ctx);
      }
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–º–µ–Ω—ã —Å—Ü–µ–Ω
  private async goToScene(
    ctx: MyContext,
    sceneName: string,
    deleteKeyboard: boolean = true,
    deleteMessage: boolean = false,
  ) {
    ctx.session.currentScene = sceneName;
    switch (sceneName) {
      case SCENES.MAIN_MENU:
        await this.mainMenuScene.handle(ctx, deleteKeyboard, deleteMessage);
        break;
      case SCENES.CHECK_PRODUCT:
        await this.checkProductScene.handle(ctx);
        break;
      case SCENES.TARIFFS:
        await this.tariffsScene.handle(ctx);
        break;
      case SCENES.PAYMENT:
        await this.paymentScene.handle(ctx);
        break;
      case SCENES.PROFILE:
        await this.profileScene.handle(ctx);
        break;
      case SCENES.SUPPORT:
        await this.supportScene.handle(ctx);
        break;
    }
  }

  // –ú–ï–¢–û–î –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –¢–ê–ô–ú-–ê–£–¢–û–í
  @Cron(CronExpression.EVERY_MINUTE) // –ó–∞–ø—É—Å–∫–∞—Ç—å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
  async handleTimeouts() {
    this.logger.log('Running timeout check...');

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º SCAN –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–π
    const stream = this.redisClient.scanStream({
      match: '[0-9]*', // –ò—â–µ–º –∫–ª—é—á–∏, —Å–æ—Å—Ç–æ—è—â–∏–µ —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä
      count: 100, // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–æ 100 –∫–ª—é—á–µ–π –∑–∞ —Ä–∞–∑
    });

    let sessionKeys: string[] = [];
    stream.on('data', (keys: string[]) => {
      // keys - —ç—Ç–æ –ø–æ—Ä—Ü–∏—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π
      sessionKeys = sessionKeys.concat(keys);
    });

    // –ñ–¥—ë–º, –ø–æ–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ
    await new Promise<void>((resolve) => {
      stream.on('end', () => resolve());
    });

    this.logger.log(`Found ${sessionKeys.length} sessions via SCAN.`);
    this.logger.debug(`Session keys: ${sessionKeys}`);

    for (const chatId of sessionKeys) {
      const sessionJson = await this.redisClient.get(chatId);
      if (!sessionJson) continue;

      const session = JSON.parse(sessionJson);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å–µ—Å—Å–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏ –º–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
      if (session.waitingForInput && session.sceneEntryTime) {
        this.logger.log(
          `Session ${chatId} has waitingForInput and sceneEntryTime, checking timeout...`,
        );
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤—Ä–µ–º–µ–Ω–∏
        const timeDiff = Date.now() - session.sceneEntryTime;
        this.logger.log(
          `Timeout is: ${TIMEOUTS.DEFAULT} ms. Time difference: ${timeDiff} ms`,
        );

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–µ–≤—ã—à–µ–Ω–æ –ª–∏ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è

        if (Date.now() - session.sceneEntryTime > TIMEOUTS.DEFAULT) {
          this.logger.log(
            `Session with Chat ID: ${chatId} timed out. Resetting...`,
          );

          // 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–∞–π–º-–∞—É—Ç–µ
          await this.bot.api.sendMessage(
            chatId,
            '–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –í—ã –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.',
          );

          // 2. –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ —Å–µ—Ä–≤–∏—Å–∞ mainMenuScene
          const { text, keyboard } = this.mainMenuScene.getMainMenuPayload();

          // 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
          await this.bot.api.sendMessage(chatId, text, {
            reply_markup: keyboard,
          });

          // 4. –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–ª–æ–≥–∏—á–µ—Å–∫–∏)
          session.waitingForInput = null;
          session.sceneEntryTime = null;
          session.currentScene = SCENES.MAIN_MENU;

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –æ–±—Ä–∞—Ç–Ω–æ –≤ Redis
          await this.redisClient.set(chatId, JSON.stringify(session));
        }
      }
    }
  }
}
