import { Injectable, Logger } from '@nestjs/common';
import { MyContext } from '../../../../types';
import { PAYMENT_OPTIONS } from '../scenes.constants';

@Injectable()
export class PaymentProvider {
  private readonly logger = new Logger(PaymentProvider.name);

  async generatePaymentInvoce(
    ctx: MyContext,
    paymentOptions: PAYMENT_OPTIONS,
  ): Promise<void> {
    if (ctx.callbackQuery) {
      await ctx.answerCallbackQuery();
      await ctx.deleteMessage();
    }

    switch (paymentOptions) {
      case PAYMENT_OPTIONS.ONE_TIME:
        this.logger.log(
          `Generating one-time payment invoice for clientId: ${ctx.from?.id}`,
        );

        const paymentDataOneTime = {
          title: 'üçî 1 –°–∫–∞–Ω–∏–Ω–≥ —Å–æ—Å—Ç–∞–≤–∞',
          description:
            'üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞ –≤—Ä–µ–¥–Ω—ã–µ –¥–æ–±–∞–≤–∫–∏ (–ï-–¥–æ–±–∞–≤–∫–∏, —Å–∞—Ö–∞—Ä, —Ç—Ä–∞–Ω—Å–∂–∏—Ä—ã –∏ –¥—Ä.)',
          payload: '{}',
          currency: 'XTR',
          products: [{ amount: 1, label: 'üçî 1 –°–∫–∞–Ω–∏–Ω–≥ —Å–æ—Å—Ç–∞–≤–∞' }],
        };

        await ctx.replyWithInvoice(
          paymentDataOneTime.title,
          paymentDataOneTime.description,
          paymentDataOneTime.payload,
          paymentDataOneTime.currency,
          paymentDataOneTime.products,
        );
        break;
      case PAYMENT_OPTIONS.THREE_TIMES:
        this.logger.log(
          `Generating three-times payment invoice for clientId: ${ctx.from?.id}`,
        );

        const paymentDataThreeTimes = {
          title: 'üì¶ 10 –°–∫–∞–Ω–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤',
          description:
            'üß™ –ü–∞–∫–µ—Ç –∏–∑ 10 —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π —Å–æ —Å–∫–∏–¥–∫–æ–π ‚Äî —É–¥–æ–±–Ω–æ –∏ –≤—ã–≥–æ–¥–Ω–æ',
          payload: '{}',
          currency: 'XTR',
          products: [{ amount: 1, label: 'üì¶ 10 –°–∫–∞–Ω–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤' }],
        };

        await ctx.replyWithInvoice(
          paymentDataThreeTimes.title,
          paymentDataThreeTimes.description,
          paymentDataThreeTimes.payload,
          paymentDataThreeTimes.currency,
          paymentDataThreeTimes.products,
        );
        break;
      case PAYMENT_OPTIONS.MONTH:
        this.logger.log(
          `Generating one month payment invoice for clientId: ${ctx.from?.id}`,
        );

        const paymentDataMonth = {
          title: '‚ôæÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü',
          description:
            'üìÜ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–∫–∞–Ω—ã –Ω–∞ 30 –¥–Ω–µ–π ‚Äî –ø—Ä–æ–≤–µ—Ä—è–π –≤—Å—ë, —á—Ç–æ –µ—à—å',
          payload: '{}',
          currency: 'XTR',
          products: [{ amount: 1, label: '‚ôæÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü' }],
        };

        await ctx.replyWithInvoice(
          paymentDataMonth.title,
          paymentDataMonth.description,
          paymentDataMonth.payload,
          paymentDataMonth.currency,
          paymentDataMonth.products,
        );
        break;
      case PAYMENT_OPTIONS.YEAR:
        this.logger.log(
          `Generating one year payment invoice for clientId: ${ctx.from?.id}`,
        );

        const paymentDataYear = {
          title: 'üõ°Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≥–æ–¥',
          description:
            'ü•á –ì–æ–¥–æ–≤–∞—è –∑–∞—â–∏—Ç–∞: —Å–∫–∞–Ω–∏—Ä—É–π –≤—Å—ë –∏ –≤—Å–µ–≥–¥–∞, –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ',
          payload: '{}',
          currency: 'XTR',
          products: [{ amount: 1, label: 'üõ°Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≥–æ–¥' }],
        };

        await ctx.replyWithInvoice(
          paymentDataYear.title,
          paymentDataYear.description,
          paymentDataYear.payload,
          paymentDataYear.currency,
          paymentDataYear.products,
        );
        break;
      default:
        this.logger.warn(
          `Unknown payment option: ${paymentOptions} for chatId: ${ctx?.from?.id}`,
        );
        await ctx.answerCallbackQuery();
    }
  }
}
