import { Injectable } from '@nestjs/common';
import { IScene, MyContext } from '../../../../types';
import { InlineKeyboard } from 'grammy';
import { CALLBACK_DATA, SCENES } from '../scenes.constants';

@Injectable()
export class MainMenuSceneService implements IScene {
  readonly SCENE_NAME = SCENES.MAIN_MENU;

  /**
   * –ì–æ—Ç–æ–≤–∏—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.
   * –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç 'ctx' –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω –æ—Ç–∫—É–¥–∞ —É–≥–æ–¥–Ω–æ.
   */
  public getMainMenuPayload(): { text: string; keyboard: InlineKeyboard } {
    const text = '–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏–º—Å—è –¥–∞–ª—å—à–µ?';
    const keyboard = new InlineKeyboard()
      .text('‚ÑπÔ∏è –£—Å–ª—É–≥–∏', CALLBACK_DATA.GO_TO_SERVICES)
      .row()
      .text('üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞', CALLBACK_DATA.GO_TO_SUPPORT);

    return { text, keyboard };
  }

  async handle(ctx: MyContext): Promise<void> {
    ctx.session.waitingForInput = null;
    ctx.session.sceneEntryTime = null;
    ctx.session.currentScene = this.SCENE_NAME;

    const { text, keyboard } = this.getMainMenuPayload();

    if (ctx.callbackQuery) {
      await ctx.editMessageText(text, { reply_markup: keyboard });
      await ctx.answerCallbackQuery();
    } else {
      await ctx.reply(text, { reply_markup: keyboard });
    }
  }
}
