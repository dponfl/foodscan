import {
  Injectable,
  OnModuleInit,
  OnModuleDestroy,
  Logger,
} from '@nestjs/common';
import { RedisAdapter } from '@grammyjs/storage-redis';
import { RedisService } from '../redis';
import { ConfigService } from '@nestjs/config';
import {
  Bot,
  Context,
  session,
  SessionFlavor,
  InputFile,
  InlineKeyboard,
} from 'grammy';
import { Menu } from '@grammyjs/menu';
import {
  Conversation,
  ConversationFlavor,
  conversations,
  createConversation,
} from '@grammyjs/conversations';
import { ITelegramStarsPaymentPayload } from 'src/types';
import { UsersService } from '../users';
import { OpenAiService } from '../openai';
import * as path from 'path';
import { CommonHelpers } from '../../helpers/common';
// import { TELEGRAM_BOT_MESSAGES } from './telegram.constants';

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–µ—Å—Å–∏–π –∏ –∫–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏–π
interface SessionData {
  photo?: any; // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ
}
type MyContext = ConversationFlavor<Context & SessionFlavor<SessionData>>;
type MyConversation = Conversation<MyContext>;
@Injectable()
export class TelegramServiceOld implements OnModuleInit, OnModuleDestroy {
  private bot: Bot<MyContext>;

  private readonly logger = new Logger(TelegramServiceOld.name, {
    timestamp: true,
  });

  private paymentData: ITelegramStarsPaymentPayload = {
    title: 'Product title',
    description: 'Product description',
    payload: '{}',
    currency: 'XXX',
    products: [],
  };

  private readonly mainMenuText =
    '–¢—ã –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?\n\n' +
    '–í—ã–±–∏—Ä–∞–π –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –Ω–∏–∂–µ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏–º üëá';

  private readonly homeKeyboard = new InlineKeyboard()
    .text('TELEGRAM_BOT_MESSAGES.homeKeyboard.go_check', 'go_check')
    .row()
    .text('TELEGRAM_BOT_MESSAGES.homeKeyboard.go_pricing', 'go_pricing')
    .row()
    .text('TELEGRAM_BOT_MESSAGES.homeKeyboard.go_profile', 'go_profile')
    .text('TELEGRAM_BOT_MESSAGES.homeKeyboard.go_help', 'go_help');

  constructor(
    private readonly configService: ConfigService,
    private readonly usersService: UsersService,
    private readonly openAiService: OpenAiService,
    private readonly redisService: RedisService,
  ) {
    const tgToken = this.configService.get<string>('TELEGRAM_BOT_TOKEN');
    if (!tgToken) {
      throw new Error(
        'TELEGRAM_BOT_TOKEN is not defined in environment variables!',
      );
    }
    this.bot = new Bot<MyContext>(tgToken);

    // --- –ù–ê–ß–ê–õ–û –ë–õ–û–ö–ê –ù–ê–°–¢–†–û–ô–ö–ò MIDDLEWARE ---

    // 1. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π –≤ Redis
    const redisClient = this.redisService.getRedisClient();

    const storage = new RedisAdapter({ instance: redisClient });

    // 2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º middleware –¥–ª—è —Å–µ—Å—Å–∏–π, –∏—Å–ø–æ–ª—å–∑—É—è Redis
    this.bot.use(session({ initial: (): SessionData => ({}), storage }));

    // 3. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º middleware –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
    this.bot.use(conversations());

    // 4. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–∞—à –¥–∏–∞–ª–æ–≥
    this.bot.use(
      createConversation(
        this.analyzeProductConversation.bind(this),
        'analyzeProductConversation',
      ),
    );

    // --- –ö–û–ù–ï–¶ –ë–õ–û–ö–ê –ù–ê–°–¢–†–û–ô–ö–ò MIDDLEWARE ---

    this.setPaymentData({
      title: 'Test Product',
      description: 'Test description',
      payload: '{}',
      currency: 'XTR',
      products: [{ amount: 1, label: 'Test Product' }],
    });
  }

  private registerErrorHandler() {
    this.bot.catch((err) => {
      const ctx = err.ctx;
      const error = err.error;

      this.logger.error(
        `Error while handling update ${ctx.update.update_id}:`,
        error,
      );

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
      // –≠—Ç–æ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ —è–≤–ª—è–µ—Ç—Å—è —Ö–æ—Ä–æ—à–µ–π –ø—Ä–∞–∫—Ç–∏–∫–æ–π
      const errorMessage =
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –µ—ë —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –º—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –≤ —ç—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
      if (ctx.chat?.id) {
        ctx.api.sendMessage(ctx.chat.id, errorMessage).catch((e) => {
          this.logger.error('Failed to send error message to user:', e);
        });
      }
    });
  }

  private registerHandlers() {
    this.registerCommonHandlers();
    this.registerPaymentHandlers();
  }

  private async handleStartCommand(ctx: MyContext) {
    try {
      const user = ctx.from;
      if (user) {
        await this.usersService.findOrCreate({
          clientId: user.id, // user.id —è–≤–ª—è–µ—Ç—Å—è —Ç–∏–ø–æ–º number
          userName: user.first_name, // –ü–æ–ª–µ –≤ entity: userName
          userNick: user.username, // –ü–æ–ª–µ –≤ entity: userNick
          lang: user.language_code || 'ru', // –ü–æ–ª–µ –≤ entity: lang
        });
      }
    } catch (error) {
      this.logger.error(
        `Failed to process user in DB for clientId ${ctx.from?.id}`,
        error,
      );
    }

    await ctx.reply('TELEGRAM_BOT_MESSAGES.introText', {
      parse_mode: 'Markdown',
      reply_markup: this.homeKeyboard,
    });
  }

  private async handleHomeCommand(ctx: MyContext) {
    await ctx.reply(this.mainMenuText, {
      reply_markup: this.homeKeyboard,
    });
  }

  private async handleCheckScenario(ctx: MyContext) {
    await ctx.conversation.enter('analyzeProductConversation');
  }

  private async handlePricingScenario(ctx: MyContext) {
    await ctx.reply('–ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–∞—Ä–∏—Ñ–æ–≤...');
  }

  private async handleProfileScenario(ctx: MyContext) {
    await ctx.reply('–ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
  }

  private async handleHelpScenario(ctx: MyContext) {
    await ctx.reply('–ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏...');
  }

  /**
   * –õ–æ–≥–∏–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è "Analyze The Product" –≤ –≤–∏–¥–µ –¥–∏–∞–ª–æ–≥–∞.
   */
  private async analyzeProductConversation(
    conversation: MyConversation,
    ctx: MyContext,
  ) {
    const backKeyboard = new InlineKeyboard().text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'go_home');

    const photoPath = path.join(
      __dirname,
      '..',
      '..',
      'assets',
      'example-composition.jpg',
    );

    // 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ–¥–∏–Ω —Ä–∞–∑ –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
    const instructionsPart1 = `üì∏ –ü—Ä–∏—à–ª–∏ –º–Ω–µ –û–î–ù–û —Ñ–æ—Ç–æ –ø—Ä–æ–¥—É–∫—Ç–∞ ‚Äî —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã —É–ø–∞–∫–æ–≤–∫–∏ ‚Äî —Ç–∞–º, –≥–¥–µ —É–∫–∞–∑–∞–Ω —Å–æ—Å—Ç–∞–≤ (—Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –º–µ–ª–∫–∏–º —à—Ä–∏—Ñ—Ç–æ–º).


‚ö†Ô∏è –í–∞–∂–Ω–æ: –ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Ñ–æ—Ç–æ! –î–∞–ª—å—à–µ —è —Å–∞–º –≤—Å—ë –ø–æ–¥—Å–∫–∞–∂—É.

üß† –ü—Ä–∏–º–µ—Ä, –∫–∞–∫ –¥–æ–ª–∂–Ω–æ –≤—ã–≥–ª—è–¥–µ—Ç—å —Ñ–æ—Ç–æ:`;
    const instructionsPart2 =
      '–ö–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —Å—é–¥–∞, –∏ —è –Ω–∞—á–Ω—É –∞–Ω–∞–ª–∏–∑.';

    await ctx.reply(instructionsPart1);
    await ctx.replyWithPhoto(new InputFile(photoPath), {
      caption: instructionsPart2,
      reply_markup: backKeyboard,
    });

    // 2. –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª, –¥–∞–≤–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ 3-—Ö –ø–æ–ø—ã—Ç–æ–∫
    // for (let i = 0; i < 3; i++) {
    //   // –ù–∞ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –∑–∞–Ω–æ–≤–æ "—É—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥–æ–Ω–∫—É"
    //   const messageCtx = await Promise.race([
    //     conversation.waitFor('message'), // –ü—Ä–æ–º–∏—Å 1: –ñ–¥—ë–º –ª—é–±–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, waitFor –≤–µ—Ä–Ω—ë—Ç –Ω–∞–º "–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π" –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ–∑ —Å–µ—Å—Å–∏–∏.
    //     conversation.waitFor('callback_query:data'),
    //     CommonHelpers.sleep(300000), // –ü—Ä–æ–º–∏—Å 2: –ñ–¥—ë–º 5 –º–∏–Ω—É—Ç
    //   ]);

    //   // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–±–µ–¥–∏–ª –ª–∏ —Ç–∞–π–º-–∞—É—Ç
    //   if (messageCtx === undefined) {
    //     await ctx.reply(
    //       '–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã—à–ª–æ. –í—ã –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.',
    //     );
    //     await conversation.external(() => this.handleHomeCommand(ctx));
    //     return; // –ü–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã—Ö–æ–¥–∏–º –∏–∑ –¥–∏–∞–ª–æ–≥–∞
    //   } else if (messageCtx.callbackQuery?.data === 'go_home') {
    //     // –õ–û–ì–ò–ö–ê –ù–ê–ñ–ê–¢–ò–Ø –ö–ù–û–ü–ö–ò "–ù–ê–ó–ê–î"
    //     await messageCtx.answerCallbackQuery();
    //     await conversation.external(() => this.handleHomeCommand(ctx));
    //     return;
    //   }

    //   // 4. –ï—Å–ª–∏ –º—ã –∑–¥–µ—Å—å, –∑–Ω–∞—á–∏—Ç, –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Ç–∏–ø.

    //   if (messageCtx.message && messageCtx.message.photo) {
    //     // –°–õ–£–ß–ê–ô –£–°–ü–ï–•–ê: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —Ñ–æ—Ç–æ. –ò—Å–ø–æ–ª—å–∑—É–µ–º conversation.external() –¥–ª—è –ó–ê–ü–ò–°–ò –≤ —Å–µ—Å—Å–∏—é.

    //     await conversation.external(async (externalCtx) => {
    //       externalCtx.session.photo = messageCtx.message.photo;
    //     });

    //     // await messageCtx.reactions('üëç');

    //     await messageCtx.reply(
    //       '–û—Ç–ª–∏—á–Ω–æ! –Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ—Å—Ç–∞–≤ –ø—Ä–æ–¥—É–∫—Ç–∞, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...',
    //     );

    //     await messageCtx.replyWithChatAction('typing');

    //     const analysisResult =
    //       await this.openAiService.analyzeProductComposition(
    //         messageCtx.message.photo,
    //       );

    //     if (analysisResult.status === 'Success' && analysisResult.payload) {
    //       const successMessage =
    //         'üîé –†–∞–∑–±–æ—Ä —Å–æ—Å—Ç–∞–≤–∞:\n' +
    //         `${analysisResult.payload}\n\n` +
    //         '‚ù§Ô∏è –ó–∞–±–æ—Ç—å—Å—è –æ —Å–µ–±–µ ‚Äî —Ç—ã —Ç–æ, —á—Ç–æ —Ç—ã –µ—à—å!';
    //       await messageCtx.reply(successMessage, { parse_mode: 'Markdown' });
    //     } else {
    //       await messageCtx.reply(
    //         '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
    //       );
    //     }

    //     await conversation.external(() => this.handleHomeCommand(ctx));
    //     return; // –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –∏ –≤—ã—Ö–æ–¥–∏–º –∏–∑ –¥–∏–∞–ª–æ–≥–∞
    //   } else {
    //     // –°–õ–£–ß–ê–ô –û–®–ò–ë–ö–ò –í–í–û–î–ê: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ

    //     const errorMessage =
    //       '‚ùó –ö–∞–∂–µ—Ç—Å—è, —ç—Ç–æ –Ω–µ —Ñ–æ—Ç–æ —É–ø–∞–∫–æ–≤–∫–∏.\n' +
    //       '–ß—Ç–æ–±—ã —è —Å–º–æ–≥ –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑, –º–Ω–µ –Ω—É–∂–µ–Ω —Å–æ—Å—Ç–∞–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ (—Ñ–æ—Ç–æ —Å–ø–∏—Å–∫–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –∏ —Ç.–¥.).\n\n' +
    //       'üîÅ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ —Å–æ—Å—Ç–∞–≤–∞ ‚Äî –∏ —è —Å—Ä–∞–∑—É –Ω–∞—á–Ω—É –ø—Ä–æ–≤–µ—Ä–∫—É!';

    //     await messageCtx.reply(errorMessage, { reply_markup: backKeyboard });
    //   }
    // }

    // 5. –≠—Ç–æ—Ç –∫–æ–¥ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è, –µ—Å–ª–∏ –≤—Å–µ 3 –ø–æ–ø—ã—Ç–∫–∏ –±—ã–ª–∏ –Ω–µ—É–¥–∞—á–Ω—ã–º–∏
    await ctx.reply(
      '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–∞–∫ –∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ. –í—ã –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.',
    );
    await conversation.external(() => this.handleHomeCommand(ctx));
  }

  async onModuleInit() {
    this.logger.log('Starting Telegram bot...');
    this.registerHandlers();
    this.registerErrorHandler();

    try {
      this.logger.log('Attempting to start bot polling...');
      // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling.
      this.bot.start();
      this.logger.log('Bot polling process has been initiated.');
    } catch (error) {
      this.logger.error('Failed to start Telegram bot polling!', error);
    }
  }

  async onModuleDestroy() {
    this.logger.log('Stopping Telegram bot...');
    this.bot.stop();
    this.logger.log('Telegram bot stopped successfully!');
  }

  private registerCommonHandlers() {
    this.bot.command('start', (ctx) => this.handleStartCommand(ctx));
    this.bot.command('home', (ctx) => this.handleHomeCommand(ctx));
    this.bot.command(
      'check',
      async (ctx) => await this.handleCheckScenario(ctx),
    );
    this.bot.command('pricing', (ctx) => this.handlePricingScenario(ctx));
    this.bot.command('profile', (ctx) => this.handleProfileScenario(ctx));
    this.bot.command('help', (ctx) => this.handleHelpScenario(ctx));

    this.bot.callbackQuery('go_home', (ctx) => this.handleHomeCommand(ctx));
    this.bot.callbackQuery('go_check', (ctx) => this.handleCheckScenario(ctx));
    this.bot.callbackQuery('go_pricing', (ctx) =>
      this.handlePricingScenario(ctx),
    );
    this.bot.callbackQuery('go_profile', (ctx) =>
      this.handleProfileScenario(ctx),
    );
    this.bot.callbackQuery('go_help', (ctx) => this.handleHelpScenario(ctx));
  }

  private registerPaymentHandlers() {
    this.bot.command('pay', async (ctx) => {
      this.logger.debug(`User ${ctx.from?.id} requested payment`);
      return ctx.replyWithInvoice(
        this.paymentData.title,
        this.paymentData.description,
        this.paymentData.payload,
        this.paymentData.currency,
        this.paymentData.products,
      );
    });

    this.bot.on('pre_checkout_query', (ctx) => {
      return ctx.answerPreCheckoutQuery(true).catch(() => {
        console.error('answerPreCheckoutQuery failed');
      });
    });
  }

  public setPaymentData(data: ITelegramStarsPaymentPayload) {
    this.paymentData = data;
  }
}
