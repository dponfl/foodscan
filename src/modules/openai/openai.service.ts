import { Injectable, Logger } from '@nestjs/common';
import { OpenAiClientFactory } from './openai-client.factory';
import { ITelegramPhotoSize, OpenAiClient } from '../../types';
import { CommonService } from '../../helpers';
import z from 'zod';
import { zodTextFormat } from 'openai/helpers/zod';
import { prompts } from './openai.prompts';
import {
  FullCompositionAnalysis,
  fullCompositionAnalysisSchema,
} from './openai.schemas';
import OpenAI from 'openai';

@Injectable()
export class OpenAiService {
  private readonly logger = new Logger(OpenAiService.name);
  private readonly TELEGRAM_MESSAGE_LIMIT = 4096;

  constructor(
    private readonly clientFactory: OpenAiClientFactory,
    private readonly commonService: CommonService,
  ) {}

  /**
   * –†–∞–∑–±–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram, —É–≤–∞–∂–∞—è –ª–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Å—Ç—Ä–æ–∫.
   * @param message –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç.
   * @returns –ú–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π.
   */
  private splitMessageForTelegram(message: string): string[] {
    if (message.length <= this.TELEGRAM_MESSAGE_LIMIT) {
      return [message];
    }

    const chunks: string[] = [];
    let currentChunk = '';
    // –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø–µ—Ä–µ–Ω–æ—Å—É —Å—Ç—Ä–æ–∫–∏, —á—Ç–æ–±—ã –Ω–µ —Ä–µ–∑–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    const lines = message.split('\n');

    for (const line of lines) {
      // –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏–º–∏—Ç
      if (currentChunk.length + line.length + 1 > this.TELEGRAM_MESSAGE_LIMIT) {
        chunks.push(currentChunk);
        currentChunk = '';
      }
      currentChunk += line + '\n';
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Å—Ç–∞–≤—à–∏–π—Å—è –∫—É—Å–æ–∫
    if (currentChunk) {
      chunks.push(currentChunk);
    }

    return chunks;
  }

  async textCompletion(prompt: string): Promise<any> {
    const client = this.clientFactory.getClient(OpenAiClient.DEFAULT);
    const response = await client.responses.create({
      model: 'gpt-4-0125-preview',
      instructions: '–û—Ç–≤–µ—á–∞–π —è–∑—ã–∫–æ–º –≤—ã—Å–æ–∫–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞',
      input: prompt,
    });
    return { status: 'Success', payload: response.output_text };
  }

  async handlePhoto(photoArray: ITelegramPhotoSize[]): Promise<any> {
    try {
      const base64Url =
        await this.commonService.getBase64UrlFromTelegramPhoto(photoArray);

      const client = this.clientFactory.getClient(OpenAiClient.DEFAULT);

      const response = await client.chat.completions.create({
        // model: 'gpt-4.1-mini',
        model: 'gpt-4o',
        messages: [
          {
            role: 'user',
            content: [
              { type: 'text', text: '–ß—Ç–æ –Ω–∞ —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏?' },
              {
                type: 'image_url',
                image_url: {
                  url: base64Url,
                },
              },
            ],
          },
        ],
      });

      const analysisResult = response.choices[0].message.content;

      this.logger.log(`Photo analysis result: ${analysisResult}`);

      return { status: 'Success', payload: analysisResult };
    } catch (error) {
      this.logger.error(`Error during photo analysis: ${error.message}`);
      return { status: 'Error', payload: error.message };
    }
  }

  async handleStructuredOutputsForText(input: string): Promise<any> {
    const client = this.clientFactory.getClient(OpenAiClient.DEFAULT);

    const step = z.object({
      explanation: z.string(),
      output: z.string(),
    });

    const mathResponse = z.object({
      steps: z.array(step),
      final_answer: z.string(),
    });

    try {
      const response = await client.responses.parse({
        input,
        model: 'gpt-4o',
        text: {
          format: zodTextFormat(mathResponse, 'math_response'),
        },
      });

      this.logger.log(`Steps output: ${response.output_parsed}`);
      this.logger.log(
        `Final response: ${response.output_parsed?.final_answer}`,
      );
      return { status: 'Success', payload: response.output_parsed };
    } catch (error) {
      this.logger.error(`Error during math response: ${error.message}`);
      return { status: 'Failed', payload: error.message };
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Structured Outputs.
   */
  async analyzeProductImage(
    photoArray: ITelegramPhotoSize[],
  ): Promise<{ status: 'Success' | 'Failed' | 'Error'; payload: any }> {
    try {
      this.logger.log('Starting product image analysis...');

      const base64Url =
        await this.commonService.getBase64UrlFromTelegramPhoto(photoArray);

      const client = this.clientFactory.getClient(OpenAiClient.DEFAULT);

      const response = await client.responses.parse({
        model: 'gpt-4o',
        input: [
          {
            role: 'system',
            content: prompts.system,
          },
          {
            role: 'user',
            content: [
              {
                type: 'input_text',
                text: prompts.user,
              },
              {
                type: 'input_image',
                image_url: base64Url,
                detail: 'high',
              },
            ],
          },
        ],
        text: {
          format: zodTextFormat(
            fullCompositionAnalysisSchema,
            'CompositionAnalysis',
          ),
        },
        temperature: 0.2, // –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –±–æ–ª–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      });

      // console.log(`response: ${JSON.stringify(response)}`);

      const analysis: FullCompositionAnalysis =
        response.output_parsed as FullCompositionAnalysis;

      this.logger.log('Received structured response from OpenAI.');

      // –≠—Ç–∞–ø 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
      if (!analysis.photoCheck.isContextCorrect) {
        this.logger.warn(
          `Incorrect context. Reason: ${analysis.photoCheck.contextExplanation}`,
        );
        return { status: 'Failed', payload: analysis.photoCheck };
      }

      let fullMsg = `üîé –†–∞–∑–±–æ—Ä —Å–æ—Å—Ç–∞–≤–∞:\n\n`;

      for (const step of analysis.compositionAnalysisDetails) {
        fullMsg += `${step.explanation}\n\n`;
      }

      fullMsg += `\nüëâ ${analysis.compositionAnalysisResult}`;

      fullMsg += `\n\n‚ù§Ô∏è –ó–∞–±–æ—Ç—å—Å—è –æ —Å–µ–±–µ ‚Äî —Ç—ã —Ç–æ, —á—Ç–æ —Ç—ã –µ—à—å!`;

      this.logger.log(`Full message: ${fullMsg}`);

      // –≠—Ç–∞–ø 2: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–µ—Ä–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
      // –†–∞–∑–±–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è Telegram
      const messageChunks = this.splitMessageForTelegram(fullMsg);

      this.logger.log(
        `Message chunks for Telegram: ${JSON.stringify(messageChunks)}`,
      );

      this.logger.log('Analysis successful. Report is ready.');

      return {
        status: 'Success',
        payload: { messageChunks },
      };
    } catch (error) {
      this.logger.error(`Error during structured analysis: ${error.stack}`);
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –æ—Ç OpenAI, –Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ JSON –Ω–µ –≤–∞–ª–∏–¥–µ–Ω
      if (error instanceof OpenAI.APIError) {
        return { status: 'Error', payload: error.message };
      }
      return { status: 'Error', payload: 'An unknown error occurred.' };
    }
  }

  /**
   * –ò–º–∏—Ç–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–∞–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–∞.
   * –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ OpenAI API.
   */
  async mockAnalyzeProductComposition(
    photo: any,
  ): Promise<{ status: 'Success' | 'Error'; payload: string }> {
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –æ—Ç–≤–µ—Ç–∞ –æ—Ç API
    await new Promise((resolve) => setTimeout(resolve, 3000));

    // –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    if (Math.random() > 0.2) {
      // 80% —à–∞–Ω—Å –Ω–∞ —É—Å–ø–µ—Ö
      const examplePayload = `
        **‚ùóÔ∏è E621 - –£—Å–∏–ª–∏—Ç–µ–ª—å –≤–∫—É—Å–∞ (–≥–ª—É—Ç–∞–º–∞—Ç –Ω–∞—Ç—Ä–∏—è)**
        *–ú–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å:* –≥–æ–ª–æ–≤–Ω—ã–µ –±–æ–ª–∏, –ø—Ä–∏–≤—ã–∫–∞–Ω–∏–µ.
        *–ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–∏:* –º–∏–≥—Ä–µ–Ω—è—Ö, –≥–∏–ø–µ—Ä—Ç–æ–Ω–∏–∏.

        **‚úÖ E330 - –õ–∏–º–æ–Ω–Ω–∞—è –∫–∏—Å–ª–æ—Ç–∞**
        *–ë–µ–∑–æ–ø–∞—Å–Ω–∞* –≤ –º–∞–ª—ã—Ö –¥–æ–∑–∞—Ö.
        *–ü—Ä–∏ –∏–∑–±—ã—Ç–∫–µ –º–æ–∂–µ—Ç —Ä–∞–∑–¥—Ä–∞–∂–∞—Ç—å –ñ–ö–¢.* –û—Å—Ç–æ—Ä–æ–∂–Ω–æ –ø—Ä–∏ –≥–∞—Å—Ç—Ä–∏—Ç–µ.

        ---
        **–û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
        - –ù–µ –µ—à—å—Ç–µ —á–∞—Å—Ç–æ –ø—Ä–æ–¥—É–∫—Ç—ã —Å –ï621.
        - –ü–æ—Å–ª–µ –ø—Ä–∏—ë–º–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±–∏–ª—å–Ω–æ–µ –ø–∏—Ç—å—ë –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É–≥–æ–ª—å (2 —Ç–∞–±.).
        - –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –ñ–ö–¢ –∏–∑–±–µ–≥–∞–π—Ç–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –∫–∏—Å–ª–æ—Ç–∞–º–∏ –∏ –∫–æ–Ω—Å–µ—Ä–≤–∞–Ω—Ç–∞–º–∏.
      `;
      return { status: 'Success', payload: examplePayload };
    } else {
      return { status: 'Error', payload: '' };
    }
  }
}
